/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.CardapioController;
import controller.ClienteController;
import controller.PedidoController;
import controller.PrecosController;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import model.Cliente;
import model.Forma;
import model.Pedido;
import model.Pizza;
import model.Sabor;
import model.TipoPizza;

/**
 *
 * @author Raparthur
 */
public class JanelaPrincipal extends javax.swing.JFrame {

    private JanelaPrincipal janela;
    /**
     * Creates new form JanelaPrincipal
     */
    public JanelaPrincipal() {
        initComponents();
        janela = this;
    }

    public void initView() {
        tabelaCliente.setJanelaView(this);
        tabelaPedidos.setJanelaView(this);
        java.awt.EventQueue.invokeLater(() -> this.setVisible(true));
        
        new PrecosController(janela);
        new CardapioController(janela);
        new PedidoController(janela);
        
        //click event to detect tab change
        jTabbedPane1.addChangeListener(new ChangeListener() {
            
        @Override
        public void stateChanged(ChangeEvent e) {

            switch (jTabbedPane1.getSelectedIndex()) {
                case 1 ->                     {
                        //PrecosController controller = new PrecosController(janela);
                        break;
                    }
                case 2 ->                     {
                        //CardapioController controller = new CardapioController(janela);
                        break;
                    }
                case 3 ->                     {
                        //PedidoController controller = new PedidoController(janela);
                        break;
                    }
                default -> {
                }
            }
        }

    });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        clientesTab = new javax.swing.JPanel();
        botoesCliente = new view.BotoesCliente();
        formularioCliente = new view.FormularioCliente();
        tabelaCliente = new view.TabelaCliente();
        precosTab = new javax.swing.JPanel();
        formularioTiposPizza = new view.FormularioTiposPizza();
        cardapioTab = new javax.swing.JPanel();
        formularioSabores = new view.FormularioSabores();
        pedidosTab = new javax.swing.JPanel();
        formularioClientePedidos = new view.FormularioClientePedidos();
        tabelaPedidos = new view.TabelaPedidos();
        formularioPizza = new view.FormularioPizza();
        formularioPedidos = new view.FormularioPedidos();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout clientesTabLayout = new javax.swing.GroupLayout(clientesTab);
        clientesTab.setLayout(clientesTabLayout);
        clientesTabLayout.setHorizontalGroup(
            clientesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formularioCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botoesCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabelaCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        clientesTabLayout.setVerticalGroup(
            clientesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botoesCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formularioCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tabelaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Clientes", clientesTab);

        javax.swing.GroupLayout precosTabLayout = new javax.swing.GroupLayout(precosTab);
        precosTab.setLayout(precosTabLayout);
        precosTabLayout.setHorizontalGroup(
            precosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(precosTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formularioTiposPizza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        precosTabLayout.setVerticalGroup(
            precosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(precosTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formularioTiposPizza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(342, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Preços", precosTab);

        javax.swing.GroupLayout cardapioTabLayout = new javax.swing.GroupLayout(cardapioTab);
        cardapioTab.setLayout(cardapioTabLayout);
        cardapioTabLayout.setHorizontalGroup(
            cardapioTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardapioTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formularioSabores, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)
                .addContainerGap())
        );
        cardapioTabLayout.setVerticalGroup(
            cardapioTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardapioTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formularioSabores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(269, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cardápio", cardapioTab);

        javax.swing.GroupLayout pedidosTabLayout = new javax.swing.GroupLayout(pedidosTab);
        pedidosTab.setLayout(pedidosTabLayout);
        pedidosTabLayout.setHorizontalGroup(
            pedidosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pedidosTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pedidosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formularioClientePedidos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)
                    .addGroup(pedidosTabLayout.createSequentialGroup()
                        .addGroup(pedidosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tabelaPedidos, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
                            .addComponent(formularioPizza, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(formularioPedidos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pedidosTabLayout.setVerticalGroup(
            pedidosTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pedidosTabLayout.createSequentialGroup()
                .addComponent(formularioClientePedidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formularioPedidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(formularioPizza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabelaPedidos, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Pedidos", pedidosTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private view.BotoesCliente botoesCliente;
    private javax.swing.JPanel cardapioTab;
    private javax.swing.JPanel clientesTab;
    private view.FormularioCliente formularioCliente;
    private view.FormularioClientePedidos formularioClientePedidos;
    private view.FormularioPedidos formularioPedidos;
    private view.FormularioPizza formularioPizza;
    private view.FormularioSabores formularioSabores;
    private view.FormularioTiposPizza formularioTiposPizza;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pedidosTab;
    private javax.swing.JPanel precosTab;
    private view.TabelaCliente tabelaCliente;
    private view.TabelaPedidos tabelaPedidos;
    // End of variables declaration//GEN-END:variables

    //aba clientes
    public void setController(ClienteController controller) {
        botoesCliente.setController(controller);
    }
    
    //aba precos
    public void setController(PrecosController controller) {
       formularioTiposPizza.setController(controller);
    }
    
    //aba cardapio
    public void setController(CardapioController controller) {
       formularioSabores.setController(controller);
    }
    
    //aba pedidos
    public void setController(PedidoController controller) {
       formularioClientePedidos.setController(controller);
       formularioPedidos.setController(controller);
       formularioPizza.setController(controller);
    }

    //===========================CLIENTES========================
    //retorna o cliente caso formulario da aba clientes totalmente preenchido ou nulo se faltar algum campo
    public Cliente getClienteFormulario() {
        return formularioCliente.getFormularioPreenchido();
    }

    //insere a linha na tabela
    public void adicionaClienteTabela(Cliente cliente) {
        tabelaCliente.adicionaCliente(cliente);
    }

    public void listaClientesTabela(List<Cliente> clientes) {
        tabelaCliente.setListaClientesTabela(clientes);
    }

    //retorna o clinte ja atualizado para salvar
    public Cliente getClienteParaAtualizar() {
        return formularioCliente.getClienteParaAtualizar();
    }

    public List<Cliente> getClientesParaExcluir() {
        return tabelaCliente.getClientesParaExcluirDaTabela();
    }

    public void excluirClientesTabela(List<Cliente> clientes) {
        tabelaCliente.excluirClientesDaTabela(clientes);
    }
    
    //===========================CARDAPIO========================
    public void carregaTiposPizza(List<TipoPizza> tipos){
        formularioSabores.setTiposPizzaList(tipos);
        formularioTiposPizza.setTiposPizzaList(tipos);
    }
    
    public void carregaSabores(List<Sabor> sabores){
        formularioSabores.setSaboresList(sabores);
    }

    public TipoPizza getTipoParaAtualizar(){
        return formularioTiposPizza.getTipoPizzaFormularioParaAtualizar();
    }
    
    public TipoPizza getTipoParaInserir(){
        return formularioTiposPizza.getTipoPizzaFormularioParaInserir();
    }
    
    public Sabor getSaborParaAtualizar(){
        return formularioSabores.getSaborFormularioParaAtualizar();
    }
    
    public Sabor getSaborParaInserir(){
        return formularioSabores.getSaborFormularioParaInserir();
    }
    
    //====================PEDIDOS==================================
    public Cliente getClienteSelecionado(){
        return formularioClientePedidos.getClienteSelecionado();
    }
    
    public void setClientesPedido(List<Cliente> clientes){
        formularioClientePedidos.setClienteList(clientes);
    }
    
    public void setSaboresPedido(List<Sabor> sabores){
        formularioPizza.setSaboresList(sabores);
    }
    
    public void setFormasPedido(List<Forma> formas){
        formularioPizza.setFormasList(formas);
    }
    
    public void setPedidosCliente(List<Pedido> pedidos){
        formularioPedidos.setPedidoDoCliente(pedidos);        
    }
    
    public void setPedidotabela(Pedido pedido){
        List<Pizza> pizzas = pedido.getPizzas();
        tabelaPedidos.getModeloTabela().setListaPizzas(pizzas); 
    }
    
    public Pizza getPizzaFormulario() {
        return formularioPizza.getFormularioPreenchido();
    }
    
    //insere a linha na tabela
    public void adicionaPizzaTabela(Pizza pizza) {
        tabelaPedidos.adicionaPizza(pizza);
    }

    public List<Pedido> getPedidosCliente(){
        return formularioPedidos.getPedidosCliente();
    }
    
    public void setPedidoSelecionado(Pedido pedido){
        formularioPedidos.setPedidoSelecionado(pedido);
    }
    
    public void eliminaPizzasTabela(List<Pizza> listaParaExcluir){
        tabelaPedidos.excluirPizzasDaTabela(listaParaExcluir);
    }
    
    public void esvaziarPizzasDaTabela() {
        tabelaPedidos.esvaziarPizzasDaTabela();
    }
    
    public Pizza getPizzaParaAtualizar(){
        Pizza pizza = formularioPizza.getPizzaParaAtualizar();
        tabelaPedidos.atualizarPizzaTabela(pizza);
        return pizza;
    }
    
    public void adiconaTotalPedido(Pizza pizza){
        formularioPedidos.adiconaTotalPedido(pizza);
    }

    public void atualizaTotalPedido() {
        List<Pizza> pizzas = formularioPedidos.getPedidoSelecionado().getPizzas();
        formularioPedidos.setTotalPedido(pizzas);
    }
    
    public List<Pizza> getPizzasParaExcluir() {
        return tabelaPedidos.getPizzaParaExcluirDaTabela();
    }
    //=============================================================
    
    //4 abaixo: retornam os panels da jenela principal
    public BotoesCliente getBotoesCliente() {
        return botoesCliente;
    }

    public FormularioCliente getFormularioCliente() {
        return formularioCliente;
    }

    public TabelaCliente getTabelaCliente() {
        return tabelaCliente;
    }
    
    public FormularioPizza getFormularioPizza() {
        return formularioPizza;
    }
    
    public TabelaPedidos getTabelaPizza() {
        return tabelaPedidos;
    }

    //2 abaixo: modais
    public void apresentaInfo(String info) {
        JOptionPane.showMessageDialog(null, info + "\n", "Informação", JOptionPane.INFORMATION_MESSAGE);
    }

    public void apresentaErro(String erro) {
        JOptionPane.showMessageDialog(null, erro + "\n", "Erro", JOptionPane.ERROR_MESSAGE);
    }

    

}
