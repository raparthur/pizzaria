/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import model.Cliente;

/**
 *
 * @author Raparthur
 */
public class TabelaCliente extends javax.swing.JPanel {
    
    private JanelaPrincipal janela;
    private int linhaClicadaParaAtualizacao = -1;

    private ClienteTableModel modeloTabelaCliente = new ClienteTableModel();

    /**
     * Creates new form TabelaCliente
     */
    public TabelaCliente() {
        initComponents();
    }
    
    public void setJanelaView(JanelaPrincipal janela) {
        this.janela = janela;
    }
    
    public ClienteTableModel getModeloTabela(){
        return modeloTabelaCliente;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaClientes = new javax.swing.JTable();

        tabelaClientes.setModel(modeloTabelaCliente);
        tabelaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaClientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaClientesMouseClicked
        //Pega a linha clicada
        linhaClicadaParaAtualizacao = this.tabelaClientes.rowAtPoint(evt.getPoint());
        //Pega o contato da linha clicada
        Cliente cliente = modeloTabelaCliente.getCliente(linhaClicadaParaAtualizacao);
        //Seta os dados no formul√°rio
        janela.getFormularioCliente().setClienteParaPreencher(cliente);
    }//GEN-LAST:event_tabelaClientesMouseClicked

    public JTable getTabelaContato() {
        return tabelaClientes;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaClientes;
    // End of variables declaration//GEN-END:variables

    //insere este cliente como linha na tabela
    public void adicionaCliente(Cliente cliente){
        modeloTabelaCliente.adicionaCliente(cliente);
        Cliente vazio = new Cliente();
        vazio.setNome("");
        vazio.setSobrenome("");
        vazio.setTel("");
        janela.getFormularioCliente().setClienteParaPreencher(vazio);
    }

    public void atualizarClienteTabela(Cliente cliente) {
        modeloTabelaCliente.fireTableRowsUpdated(linhaClicadaParaAtualizacao, linhaClicadaParaAtualizacao);  
    }
    
    public void setListaClientesTabela(List<Cliente> lista) {
        modeloTabelaCliente.setListaClientes(lista);
    }
    
    public List<Cliente> getClientesParaExcluirDaTabela() {
        int[] linhasSelecionadas = this.getTabelaContato().getSelectedRows();
        List<Cliente> listaExcluir = new ArrayList();
        for (int i = 0; i < linhasSelecionadas.length; i++) {
            Cliente contato = modeloTabelaCliente.getCliente(linhasSelecionadas[i]);
            listaExcluir.add(contato);
        }
        return listaExcluir;
    }
    
    public void excluirClientesDaTabela(List<Cliente> listaParaExcluir) {
        modeloTabelaCliente.removeClientes(listaParaExcluir);
    }

    
}
